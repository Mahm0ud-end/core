# mahmoud guide
## Assuming running Ubuntu Server 22.04.1 LTS for raspberry pi (64) from https://ubuntu.com/download/raspberry-pi :https://ubuntu.com/download/raspberry-pi/thank-you?version=22.04.1&architecture=server-arm64+raspi

Note: default username: ubuntu
      default password: ubuntu

#First setting up the wifi: (following this website: https://linuxconfig.org/ubuntu-20-04-connect-to-wifi-from-command-line )
1- Command: sudoedit /etc/netplan/50-cloud-init.yaml
2- change the file like the following:
network:
    ethernets:
        eth0:
            dhcp4: true
            optional: true
    version: 2
    wifis:
        wlan0:
            optional: true
            access-points:
                "SSID-NAME-HERE":
                    password: "PASSWORD-HERE"
            dhcp4: true
3- Command: sudo netplan apply
4- Command (to check the ip): ip a


#Second to install the system:
1- Command: cd
2- git clone https://www.github.com/Mahm0ud-end/core.git
3- Command(to make install0.sh execytable): chmod +x ~/core/install0.sh
4- Command (to run the install0.sh): ~/core/install0.sh


NOTE: country settings step must be executed again everytime the raspberry change (and probably if the network changes, best practice is to do it again everytime anything changes): or the online webserver will not work!
#Third: to change country settings
1- Command: sudo raspi-config
2- select 5: localisation options
3- configure L2: time zone to cairo
4- configure L4: wireless channel country to EG

--------------------------
Deployment online
--------------------------
1- Go to cloudflare Zero Trust tunnel: (link is different for different accounts) https://dash.teams.cloudflare.com/7c6aa42cd8a758dea786409bece91dad/access/tunnels
2- Create tunnel. Then in the overview, navigate to Debian-> arm64-bit: execute the command of "If you already have cloudflared installed on your machine" inside ubuntu.
3- add public hostname: service: HTTP , URL: localhost:8123, choose your subdomain and any arbitrary sub_domain, leave the path empty: The URL would be: https://subdomain.domain

--------------------------
For development: (first two steps automatically execute on installation)
--------------------------
#Fourth: to enable ssh (ssh already installed on ubuntu server) (https://www.cyberciti.biz/faq/ubuntu-linux-install-openssh-server/)
1- Command: sudo systemctl enable ssh
2- Command: sudo systemctl start ssh
3- Command(to login from a pc on the network): ssh ubuntu@stips.local
3.2- or Command: ssh ubuntu@ip_address

--------------------------
Ignore:
--------------------------
(Ignore)#: to make system autologin: (following this forum "https://askubuntu.com/questions/819117/how-can-i-get-autologin-at-startup-working-on-ubuntu-server-16-04-1")
1- Command: sudo systemctl edit getty@tty1.service
2- add this following to the file then save:
[Service]
ExecStart=
ExecStart=-/sbin/agetty --noissue --autologin ubuntu %I $TERM
Type=idle



--------------------------
For cloning the OS to a file: https://askubuntu.com/questions/227924/sd-card-cloning-using-the-dd-command
--------------------------
0- This requires a desktop with Linux
1- insert the operating system media to the Linux (e.g. ubuntu desktop) desktop machine
2- Command: sudo fdisk -l
3- figure out what two partitions are the sd card holding the OS (e.g. /dev/sdb1 and /dev/sdb2)
4- Command (unmount both of them): sudo umount /dev/sdb1    &&     sudo umount /dev/sdb2
5- sudo dd if=/dev/sdb of=~/cloned_imaged_name.img bs=2M status=progress
*- now you have the cloned image in the ~/ directory. You can copy it anywhere and use it with balena etcher to flash another sd card of the same size.
6.0- Extra step for flashing another card using the Linux dd command:
6.1- Command: sudo fdisk -l
6.2- identify the new sd card name (e.g. /dev/sdb)
6.3- Command: sudo umount /dev/sdb ( or it might be more than one partition )
6.4- sudo umount /dev/sdb (or eject multiple partitions)
6.5- sudo dd if=~/cloned_imaged_name.img of=/dev/sdb bs=2M status=progress
